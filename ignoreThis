/*
 * @author Abena Bonsu (and Liz Izhikevich) + adapted by Carlos Mattoso
 * @date February 12, 2018
 * File: Gui2048.java
 *
 * This program is used to construct a new GUI board game that can be
 * used in the game play of 2048. 
 */

import javafx.application.*;
import javafx.scene.control.*;
import javafx.scene.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.stage.*;
import javafx.event.*;
import javafx.scene.input.*;
import javafx.scene.text.*;
import javafx.geometry.*;
import java.util.*;
import java.io.*;

public class Gui2048 extends Application {

	// Main Instance variables
	private GridPane pane;
	private int GRID_SIZE = 4;
	private Label scoreNum;

	// Create myKeyHandler Object
	private MyKeyHandler keyHandler = new MyKeyHandler();

	// Create Board object
	private Board board;

	// ================================ PART 1 ==================================

	/*
	 * Name: start(Stage primaryStage)
	 *
	 * TODO: COMPLETE THIS METHOD (AND HEADER)
	 *
	 * Return: void
	 */
	public void start(Stage primaryStage) {
		// Prepare the stage for our game
		setUpPane(primaryStage);

		// TODO:  1. Initialize the model of the game board - i.e. 
		// call the constructor for the `board` variable


		// TODO:  2. Update the visualization of the board - i.e.
		// call `updateBoard`


	}

	/*
	 * Name: updateScore(Stage primaryStage)
	 *
	 * TODO: COMPLETE THIS METHOD (AND HEADER)
	 *
	 * Return: void
	 */
	void updateScore(int score) {
		// TODO:  1. Convert `score` to a String


		// TODO:  2. Update the text of `scoreNum`.


	}
/*
 * The method setUpPane(Stage primaryStage) is used to set the foundation 
 * for the GUI itself. This is where elements such as the GridPane and Scene are created. 
 * Read the comments: they are step-by-step instructions of the code you should write.
 */

	/*
	 * setUpPane()
	 * 
	 * TODO: COMPLETE THIS METHOD (AND HEADER)
	 *
	 *
	 * Return: None
	 *
	 */
	public void setUpPane(Stage primaryStage) {
		// Set up top level pane
		BorderPane topPane = new BorderPane();
		

		// TODO:  1. Set up scene associated to topPane
		Scene scene = new Scene(topPane); // !! ATTN: Change this to constructor call


		// TODO:  2. Set up properties of primaryStage (window title, scene, width and height)
		primaryStage.setTitle("2048");
		primaryStage.setScene(scene);
		primaryStage.setHeight(700);
		primaryStage.setWidth(700);
	//More? 

		
		// TODO:  3. Add "2048" title to the header of the game
		Label header = new Label("2048");
		header.setFont(Font.font("Arial", FontWeight.BOLD, 
				FontPosture.ITALIC, 20));


		// TODO:  4. Add score to the header of the game - i.e. place `scoreNum` there
		// Make sure to also call `updateScore(0)`
		Label scoreHeader = new Label("Score:");
		scoreHeader.setFont(Font.font("Arial", FontWeight.BOLD, FontPosture.ITALIC, 20));
		
		Pane titles = new HBox();
		topPane.setTop(titles);
		titles.getChildren().addAll(header, scoreHeader);
		topPane.setAlignment(header, Pos.CENTER_LEFT);
		topPane.setAlignment(scoreHeader, Pos.CENTER_RIGHT);
		

		// TODO:  5. Add tiles to the visualization of the game grid 
		// - i.e. `pane`, the GridPane that we use to show the board


		// TODO:  6. Call for key actions --
		// !! ATTN:	Uncomment the following line after you set up `scene` in step 1 above:
		// scene.setOnKeyPressed(keyHandler);


		/* No need to change the following code */
		Button btn = createUndoButton(topPane);
		topPane.setBottom(btn);

		// Display stage
		primaryStage.setWidth(700);
		primaryStage.setHeight(700);
		primaryStage.show();
	}

	// ============================= End of PART 1 ==============================

	// 																	

	// Go to Part 2 first. It's in GameTile.java


	// ================================ PART 3 ==================================

	/*
	 * Name: updateBoard()
	 *
	 * TODO: COMPLETE THIS METHOD (AND HEADER)
	 *
	 */
	private void updateBoard() {
		// TODO:  1. Update the score label i.e. make a call to updateScore
		// To get the current score call `getScore()` on the `board`.


		// TODO:  2. Get rid of all of the current game tiles to make new ones

		
		// TODO:  3. Update board by reinitializing it to the grid

		
		// [Optional] If the game is over, display a new Scene stating this


	}

	// ============================= End of PART 3 ==============================

	// Almost done. You'll find Part 4 in Board.java: finish all the canMove methods.
	//
	//																



	// ================================ PART 5 ==================================

	/*
	 * Name: createUndoButton()
	 *
	 * TODO: COMPLETE THIS METHOD (AND HEADER)
	 *
	 */
	Button createUndoButton(BorderPane topPane) {
		Button btn = new Button();

		// TODO:  1. Make the button text be "Undo!"


		// TODO:  2. Place button at the bottom of `topPane`


		// TODO:  3. Add action handler for the button which calls `board.undo()`.
		// Don't forget to call `updateBoard` after calling `board.undo()`
		//   in the action handler...


		return btn;
	}

	// ============================= End of PART 5 ==============================
	
	// 	Good job! Ship it.
	// 		.  o ..                  
  // 		o . o o.o                
  //      		...oo               
  //      		 __[]__            
  //     		__|_o_o_o\__         
  //   		  \""""""""""/         
  //   		   \. ..  . /          
  // 	^^^^^^^^^^^^^^^^^^^^^^^^^


	/** MyKeyHandler is an inner class to handle key events 
	 * and pass them to the Board object to make the appropriate move.
	 * @author Prof. Christine Alvarado
	 *
	 */
	class MyKeyHandler implements EventHandler<KeyEvent> {

		/*
		 * Name: handle(KeyEvent e)
		 *
		 * Purpose: The purpose of this method is to handle the keys pressed by the
		 * user of the game.
		 *
		 * Parameters: KeyEvent e - The key event that the user enters - in other
		 * words the directional arrows that the user can choose, or the "Q" key for
		 * quitting the game
		 *
		 * Return: void
		 */
		public void handle(KeyEvent e) {

			Direction direction = null;

			// if user hits up arrow
			if (e.getCode() == KeyCode.UP) {
				direction = Direction.UP;
				System.out.println("Moving UP");
			}

			// if user hits down arrow
			else if (e.getCode() == KeyCode.DOWN) {
				System.out.println("Moving DOWN");
				direction = Direction.DOWN;
			}

			// If user hits left arrow
			else if (e.getCode() == KeyCode.LEFT) {
				System.out.println("Moving LEFT");
				direction = Direction.LEFT;
			}

			// If user hits right arrow
			else if (e.getCode() == KeyCode.RIGHT) {
				System.out.println("Moving RIGHT");
				direction = Direction.RIGHT;
			}

			boolean success = board.move(direction);
			if (success) {
				board.addRandomTile();
				updateBoard();
			}

		}

	}

	/**
	 * This main method is needed for running in eclipse
	 * @param args
	 */
	public static void main(String [] args)
	{
		Application.launch(args);
	}


}
